{"version":3,"file":"static/js/235.bcbb8c17.chunk.js","mappings":"ypvjDAgBMA,EAAmB,SAACC,GACxB,OAAOC,IAAAA,QAAgB,CACrBC,UAAW,gBACXC,KAAK,mCAADC,OAAqCJ,EAAI,UAC7CK,SAAU,CAAC,EAAG,GACdC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,KAEtB,EAEMC,EAA0B,SAACC,GAC/B,OAAOR,IAAAA,QAAgB,CACrBE,KAAK,SAADC,OAAWK,EAAQC,gBAAe,WACtCR,UAAW,wBACXG,SAAU,CAAC,GAAI,KAEnB,EAEMM,EAAc,WAClB,IAAMC,GAAMC,EAAAA,EAAAA,MAENC,EAAgB,SAACC,GACrB,OAAQA,EAAMC,KACZ,IAAK,UACCD,EAAME,SACRL,EAAIM,SAEN,MACF,IAAK,YACCH,EAAME,SACRL,EAAIO,UAIZ,EAgBA,OAdAC,EAAAA,EAAAA,YAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWR,GAC5B,WACLO,OAAOE,oBAAoB,UAAWT,EACxC,CACF,GAAG,KAEHM,EAAAA,EAAAA,YAAU,WACRR,EAAIY,WAAU,WACSZ,EAAIa,eACZC,OACf,GACF,GAAG,CAACd,IAEG,IACT,EAOMe,EAAiB,SAAHC,GAIb,IAHLC,EAAUD,EAAVC,WAIA,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CACNC,KAAMC,EACNC,YAAa,CAAEC,MAAO,aACtBC,aAAc,SAACC,EAASC,GACtB,IAAMC,EAAOxC,EAAiBsC,EAAQG,WAAWC,MAEjD,OAAKJ,EAAQG,WAAWC,KACjBxC,IAAAA,OAAeqC,EAAQ,CAAEC,KAAAA,IADKtC,IAAAA,OAAe,CAAC,EAAG,GAAI,CAAEsC,KAAAA,GAEhE,EACAG,cAAe,SAACL,EAASM,GACvB,IAAIC,EAE0B,YAA1BP,EAAQQ,SAASC,MAAsBT,EAAQG,WAAWC,OAU5DG,EAAa,CAAEG,SAPbJ,EAICK,YACAC,YAEgCV,KADtBxC,EAAiBsC,EAAQG,WAAWC,QAI/CG,GACFf,EAAW,CAACe,GAEhB,GAGN,EAmDA,EAjDY,WACV,IAAAM,GAA4CC,EAAAA,EAAAA,UAA4B,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApEI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GASxC,OACEI,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CACXC,cAAY,EACZC,aAAa,EACbC,oBAAoB,EAEpBC,OAAQ,CAAC,WAAY,WACrBC,KAAM,GACNC,QAAS,GACTC,QAAS,GACTC,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,QACjBC,QAAS,OACTC,OAAQ,GACRC,SAAA,EAEFzC,EAAAA,EAAAA,KAACnB,EAAW,KACZ6C,EAAAA,EAAAA,MAACgB,IAAkB,CACjBC,gBAAc,EACdC,mBAAoBlE,EACpBmE,SAAS,EACTC,4BAA0B,EAC1BC,wBAAyB,GAAGN,SAAA,CAE3BjB,EAAe1C,KAAI,SAACgC,EAAYkC,GAAK,OACpChD,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAELhC,SAAUH,EAAWG,SACrBR,KAAMK,EAAWL,MAFZuC,EAGL,KAEJhD,EAAAA,EAAAA,KAACH,EAAc,CAACE,WAxCH,SAACmD,GAClBzB,GAAkB,SAAC0B,GAAkB,SAAA7E,QAAA8E,EAAAA,EAAAA,GAChCD,IAAkBC,EAAAA,EAAAA,GAClBF,GAAa,GAEpB,SAuCF,C","sources":["components/Map/Map.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport dragonCon from \"./dragon-con.json\";\nimport {\n  MapContainer,\n  GeoJSON,\n  useMap,\n  GeoJSONProps,\n  Marker,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport leaflet from \"leaflet\";\nimport \"./Map.css\";\nimport MarkerClusterGroup from \"react-leaflet-cluster\";\nimport { LatLngExpression } from \"leaflet\";\nimport { DivIcon } from \"leaflet\";\n\nconst createCustomIcon = (text: string) => {\n  return leaflet.divIcon({\n    className: \"custom-marker\",\n    html: `<div class=\"custom-marker-text\">${text}</div>`,\n    iconSize: [8, 8],\n    iconAnchor: [15, 15], // point of the icon which will correspond to marker's location\n    popupAnchor: [0, -15], // point from which the popup should open relative to the iconAnchor\n  });\n};\n\nconst createClusterCustomIcon = (cluster: { getChildCount: () => number }) => {\n  return leaflet.divIcon({\n    html: `<span>${cluster.getChildCount()}</span>`,\n    className: \"custom-marker-cluster\",\n    iconSize: [25, 25],\n  });\n};\n\nconst FocusOnLoad = () => {\n  const map = useMap();\n\n  const handleKeyDown = (event: KeyboardEvent) => {\n    switch (event.key) {\n      case \"ArrowUp\":\n        if (event.metaKey) {\n          map.zoomIn();\n        }\n        break;\n      case \"ArrowDown\":\n        if (event.metaKey) {\n          map.zoomOut();\n        }\n        break;\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, []);\n\n  useEffect(() => {\n    map.whenReady(() => {\n      const mapContainer = map.getContainer();\n      mapContainer.focus();\n    });\n  }, [map]);\n\n  return null;\n};\n\ntype MarkerData = {\n  position: LatLngExpression;\n  icon: DivIcon;\n};\n\nconst GeoJsonDisplay = ({\n  addMarkers,\n}: {\n  addMarkers: ([markers]: Array<MarkerData>) => void;\n}) => {\n  return (\n    <GeoJSON\n      data={dragonCon as GeoJSONProps[\"data\"]}\n      pathOptions={{ color: \"darkgreen\" }}\n      pointToLayer={(feature, latlng) => {\n        const icon = createCustomIcon(feature.properties.name);\n\n        if (!feature.properties.name) return leaflet.marker([0, 0], { icon });\n        return leaflet.marker(latlng, { icon });\n      }}\n      onEachFeature={(feature, layer) => {\n        let markerData: MarkerData | undefined;\n\n        if (feature.geometry.type === \"Polygon\" && feature.properties.name) {\n          // Have to cast this as `getBounds` is not found, for some reason\n          const centroid = (\n            layer as unknown as {\n              getBounds: () => { getCenter: () => LatLngExpression };\n            }\n          )\n            .getBounds()\n            .getCenter();\n          const icon = createCustomIcon(feature.properties.name);\n          markerData = { position: centroid, icon };\n        }\n\n        if (markerData) {\n          addMarkers([markerData]); // Add the marker data to the state\n        }\n      }}\n    />\n  );\n};\n\nconst Map = () => {\n  const [markerDataList, setMarkerDataList] = useState<Array<MarkerData>>([]);\n\n  const addMarkers = (newMarkerData: Array<MarkerData>) => {\n    setMarkerDataList((prevMarkerDataList) => [\n      ...prevMarkerDataList,\n      ...newMarkerData,\n    ]);\n  };\n\n  return (\n    <MapContainer\n      preferCanvas\n      zoomControl={false}\n      attributionControl={false}\n      // Center on the Marriott\n      center={[33.761585, -84.385612]}\n      zoom={17}\n      maxZoom={20}\n      minZoom={15}\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"black\",\n        outline: \"none\",\n        zIndex: 0,\n      }}\n    >\n      <FocusOnLoad />\n      <MarkerClusterGroup\n        chunkedLoading\n        iconCreateFunction={createClusterCustomIcon}\n        animate={false}\n        removeOutsideVisibleBounds\n        disableClusteringAtZoom={19}\n      >\n        {markerDataList.map((markerData, index) => (\n          <Marker\n            key={index}\n            position={markerData.position}\n            icon={markerData.icon}\n          />\n        ))}\n        <GeoJsonDisplay addMarkers={addMarkers} />\n      </MarkerClusterGroup>\n    </MapContainer>\n  );\n};\n\nexport default Map;\n"],"names":["createCustomIcon","text","leaflet","className","html","concat","iconSize","iconAnchor","popupAnchor","createClusterCustomIcon","cluster","getChildCount","FocusOnLoad","map","useMap","handleKeyDown","event","key","metaKey","zoomIn","zoomOut","useEffect","window","addEventListener","removeEventListener","whenReady","getContainer","focus","GeoJsonDisplay","_ref","addMarkers","_jsx","GeoJSON","data","dragonCon","pathOptions","color","pointToLayer","feature","latlng","icon","properties","name","onEachFeature","layer","markerData","geometry","type","position","getBounds","getCenter","_useState","useState","_useState2","_slicedToArray","markerDataList","setMarkerDataList","_jsxs","MapContainer","preferCanvas","zoomControl","attributionControl","center","zoom","maxZoom","minZoom","style","width","height","backgroundColor","outline","zIndex","children","MarkerClusterGroup","chunkedLoading","iconCreateFunction","animate","removeOutsideVisibleBounds","disableClusteringAtZoom","index","Marker","newMarkerData","prevMarkerDataList","_toConsumableArray"],"sourceRoot":""}